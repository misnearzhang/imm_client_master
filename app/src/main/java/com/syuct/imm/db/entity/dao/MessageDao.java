/*
package com.syuct.imm.db.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.syuct.imm.db.entity.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
*/
/**
 * DAO for table "message".
*//*

public class MessageDao extends AbstractDao<Message, String> {

    public static final String TABLENAME = "message";

    */
/**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    *//*

    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "user_id");
        public final static Property UserName = new Property(2, String.class, "userName", false, "user_name");
        public final static Property FriendId = new Property(3, String.class, "friendId", false, "friend_id");
        public final static Property FriendName = new Property(4, String.class, "friendName", false, "friend_name");
        public final static Property Uuid = new Property(5, String.class, "uuid", false, "uuid");
        public final static Property Status = new Property(6, String.class, "status", false, "status");
        public final static Property AddTime = new Property(7, Long.class, "addTime", false, "add_time");
    };


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    */
/** Creates the underlying database table. *//*

    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"message\" (" + //
                "\"id\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: Id
                "\"user_id\" TEXT," + // 1: userId
                "\"user_name\" TEXT," + // 2: userName
                "\"friend_id\" TEXT," + // 3: friendId
                "\"friend_name\" TEXT," + // 4: friendName
                "\"uuid\" TEXT," + // 5: uuid
                "\"status\" TEXT," + // 6: status
                "\"add_time\" INTEGER);"); // 7: addTime
    }

    */
/** Drops the underlying database table. *//*

    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"message\"";
        db.execSQL(sql);
    }

    */
/** @inheritdoc *//*

    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(4, friendId);
        }
 
        String friendName = entity.getFriendName();
        if (friendName != null) {
            stmt.bindString(5, friendName);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(6, uuid);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
 
        Long addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindLong(8, addTime);
        }
    }

    */
/** @inheritdoc *//*

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    */
/** @inheritdoc *//*

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // friendId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // friendName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // uuid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // addTime
        );
        return entity;
    }
     
    */
/** @inheritdoc *//*

    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFriendId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFriendName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUuid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    */
/** @inheritdoc *//*

    @Override
    protected String updateKeyAfterInsert(Message entity, long rowId) {
        return entity.getId();
    }
    
    */
/** @inheritdoc *//*

    @Override
    public String getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    */
/** @inheritdoc *//*

    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
*/
