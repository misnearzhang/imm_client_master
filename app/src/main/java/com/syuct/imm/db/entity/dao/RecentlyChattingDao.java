package com.syuct.imm.db.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.syuct.imm.db.entity.RecentlyChatting;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECENTLY_CHATTING".
*/
public class RecentlyChattingDao extends AbstractDao<RecentlyChatting, Long> {

    public static final String TABLENAME = "RECENTLY_CHATTING";

    /**
     * Properties of entity RecentlyChatting.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Account = new Property(2, String.class, "account", false, "ACCOUNT");
        public final static Property TitleImageNet = new Property(3, String.class, "titleImageNet", false, "TITLE_IMAGE_NET");
        public final static Property TitleImageLocal = new Property(4, String.class, "titleImageLocal", false, "TITLE_IMAGE_LOCAL");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Summary = new Property(6, String.class, "summary", false, "SUMMARY");
        public final static Property Date = new Property(7, java.util.Date.class, "date", false, "DATE");
    }


    public RecentlyChattingDao(DaoConfig config) {
        super(config);
    }
    
    public RecentlyChattingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECENTLY_CHATTING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"ACCOUNT\" TEXT," + // 2: account
                "\"TITLE_IMAGE_NET\" TEXT," + // 3: titleImageNet
                "\"TITLE_IMAGE_LOCAL\" TEXT," + // 4: titleImageLocal
                "\"NAME\" TEXT," + // 5: name
                "\"SUMMARY\" TEXT," + // 6: summary
                "\"DATE\" INTEGER);"); // 7: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECENTLY_CHATTING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecentlyChatting entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getType());
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(3, account);
        }
 
        String titleImageNet = entity.getTitleImageNet();
        if (titleImageNet != null) {
            stmt.bindString(4, titleImageNet);
        }
 
        String titleImageLocal = entity.getTitleImageLocal();
        if (titleImageLocal != null) {
            stmt.bindString(5, titleImageLocal);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(7, summary);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecentlyChatting entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getType());
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(3, account);
        }
 
        String titleImageNet = entity.getTitleImageNet();
        if (titleImageNet != null) {
            stmt.bindString(4, titleImageNet);
        }
 
        String titleImageLocal = entity.getTitleImageLocal();
        if (titleImageLocal != null) {
            stmt.bindString(5, titleImageLocal);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(7, summary);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public RecentlyChatting readEntity(Cursor cursor, int offset) {
        RecentlyChatting entity = new RecentlyChatting( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // account
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // titleImageNet
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // titleImageLocal
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // summary
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecentlyChatting entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setAccount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitleImageNet(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitleImageLocal(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSummary(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecentlyChatting entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecentlyChatting entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecentlyChatting entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
