/*
package com.syuct.imm.db.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.syuct.imm.db.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
*/
/**
 * DAO for table "message".
*//*

public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "message";

    */
/**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    *//*

    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "user_id");
        public final static Property UserName = new Property(2, String.class, "userName", false, "user_name");
        public final static Property Password = new Property(3, String.class, "password", false, "password");
        public final static Property Status = new Property(4, String.class, "status", false, "status");
        public final static Property AddTime = new Property(5, java.util.Date.class, "addTime", false, "add_time");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    */
/** Creates the underlying database table. *//*

    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"message\" (" + //
                "\"id\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: Id
                "\"user_id\" TEXT," + // 1: userId
                "\"user_name\" TEXT," + // 2: userName
                "\"password\" TEXT," + // 3: password
                "\"status\" TEXT," + // 4: status
                "\"add_time\" INTEGER);"); // 5: addTime
    }

    */
/** Drops the underlying database table. *//*

    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"message\"";
        db.execSQL(sql);
    }

    */
/** @inheritdoc *//*

    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        java.util.Date addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindLong(6, addTime.getTime());
        }
    }

    */
/** @inheritdoc *//*

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    */
/** @inheritdoc *//*

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // status
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // addTime
        );
        return entity;
    }
     
    */
/** @inheritdoc *//*

    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    */
/** @inheritdoc *//*

    @Override
    protected String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getId();
    }
    
    */
/** @inheritdoc *//*

    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    */
/** @inheritdoc *//*

    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
*/
